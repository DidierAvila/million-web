import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '../ui/Button';
import { Input } from '../ui/Input';
import { useState, useEffect } from 'react';
import { CreatePropertyDto, OwnerDto, PropertyDto, UpdatePropertyDto } from '@/types/api';
import { api } from '@/lib/api-client';

// Definimos un esquema de validación simplificado directamente aquí
const propertySchema = z.object({
  name: z.string().min(1, 'El nombre de la propiedad es requerido'),
  address: z.string().min(1, 'La dirección es requerida'),
  price: z.coerce.number().min(0.01, 'El precio debe ser mayor a 0'),
  taxes: z.coerce.number().min(0, 'Los impuestos no pueden ser negativos'),
  year: z.coerce.number()
    .int('El año debe ser un número entero')
    .min(1900, 'El año no puede ser anterior a 1900')
    .max(new Date().getFullYear(), `El año no puede ser mayor a ${new Date().getFullYear()}`),
  internalCode: z.string().optional(),
  ownerId: z.string().min(1, 'El propietario es requerido'),
});

// Tipo del esquema de validación
type PropertyFormValues = z.infer<typeof propertySchema>;

interface PropertyFormProps {
  onSubmit: (data: CreatePropertyDto | UpdatePropertyDto) => Promise<void>;
  initialData?: PropertyDto;
  isLoading?: boolean;
}

export const PropertyForm = ({
  onSubmit,
  initialData,
  isLoading = false,
}: PropertyFormProps) => {
  const [owners, setOwners] = useState<OwnerDto[]>([]);
  const [loadingOwners, setLoadingOwners] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
  } = useForm<PropertyFormValues>({
    resolver: zodResolver(propertySchema),
    defaultValues: initialData
      ? {
          name: initialData.name || '',
          address: initialData.address || '',
          price: initialData.price,
          taxes: initialData.taxes,
          year: initialData.year,
          internalCode: initialData.internalCode || '',
          ownerId: initialData.ownerId || '',
        }
      : undefined,
  });

  // Cargar propietarios al montar el componente
  useEffect(() => {
    const loadOwners = async () => {
      setLoadingOwners(true);
      try {
        const ownersData = await api.owners.getAll();
        setOwners(ownersData || []);
      } catch (error) {
        console.error('Error al cargar propietarios:', error);
      } finally {
        setLoadingOwners(false);
      }
    };

    loadOwners();
  }, []);

  const handleFormSubmit = (data: PropertyFormValues) => {
    onSubmit(data as any).then(() => {
      if (!initialData) {
        // Si es un nuevo registro, limpiamos el formulario
        reset();
      }
    }).catch((error) => {
      console.error('Error al guardar la propiedad:', error);
    });
  };

  return (
    <form onSubmit={handleSubmit(handleFormSubmit)} className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Input
          label="Nombre de la propiedad"
          {...register('name')}
          error={errors.name?.message}
          required
        />

        <Input
          label="Dirección"
          {...register('address')}
          error={errors.address?.message}
          required
        />
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Input
          label="Precio"
          type="number"
          step="0.01"
          min="0"
          {...register('price')}
          error={errors.price?.message}
          required
        />

        <Input
          label="Impuestos"
          type="number"
          step="0.01"
          min="0"
          {...register('taxes')}
          error={errors.taxes?.message}
          required
        />

        <Input
          label="Año"
          type="number"
          step="1"
          min="1900"
          max={new Date().getFullYear()}
          {...register('year')}
          error={errors.year?.message}
          required
        />
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Input
          label="Código interno"
          {...register('internalCode')}
          error={errors.internalCode?.message}
        />

        <div className="w-full">
          <label
            htmlFor="ownerId"
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2"
          >
            Propietario <span className="text-red-500">*</span>
          </label>
          <select
            id="ownerId"
            {...register('ownerId')}
            className={`
              w-full px-3 py-2 border rounded-md shadow-sm
              focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500
              disabled:bg-gray-50 disabled:text-gray-500 disabled:cursor-not-allowed
              transition-colors duration-200
              ${
                errors.ownerId
                  ? 'border-red-500 focus:ring-red-500 focus:border-red-500'
                  : 'border-gray-300 dark:border-gray-600'
              }
              dark:bg-gray-800 dark:text-white
            `}
            disabled={loadingOwners}
          >
            <option value="">Seleccione un propietario</option>
            {owners.map((owner) => (
              <option key={owner.id} value={owner.id}>
                {owner.name}
              </option>
            ))}
          </select>
          {errors.ownerId && (
            <p className="mt-1 text-sm text-red-600 dark:text-red-400">
              {errors.ownerId.message}
            </p>
          )}
        </div>
      </div>

      <div className="flex justify-end space-x-2 pt-4">
        <Button
          type="button"
          variant="outline"
          onClick={() => reset()}
          disabled={isLoading}
        >
          Cancelar
        </Button>
        <Button type="submit" isLoading={isLoading}>
          {initialData ? 'Actualizar' : 'Crear'} Propiedad
        </Button>
      </div>
    </form>
  );
};
